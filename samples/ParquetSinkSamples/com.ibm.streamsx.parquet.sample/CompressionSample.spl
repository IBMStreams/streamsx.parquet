namespace com.ibm.streamsx.parquet.sample;

use com.ibm.streamsx.parquet::ParquetSink ;

/**
 * The sample demonstrates ParquetSink operator 
 * compression options in action
 */
composite CompressionSample
{
	param 
		expression<rstring> $compressionType;
		expression<rstring> $dataFile;
		expression<rstring> $outFileExt;
		expression<rstring> $hdfsUri;
		expression<rstring> $hdfsUser;
		expression<rstring> $hdfsRootPath;
		
	type static
		RawNetworkEvent_t = 
            rstring dt_orig,
            rstring computer_id, 
            rstring process_name,                       
            rstring operation, 
            rstring operation_result, 
            rstring source_host, 
            int32 source_port, 
            int32 tcpLength, 
            int64 mms,
            rstring dest_host, 
            int32 dest_port, 
            rstring filename, 
            int64 fileLength; 
		
	
	graph
		

		/**
		 * Read and Parse raw events
		 */		
		stream<RawNetworkEvent_t> NetworkEvent = FileSource()
		{
			param
				file: $dataFile;
				format: csv;
				separator: "|";
		}


		() as NetworkEventParquetSink = ParquetSink(NetworkEvent)
		{
			param
				hdfsUri: $hdfsUri;
				hdfsUser:$hdfsUser;
     	    	rootPath: $hdfsRootPath;
     	        file:  $dataFile + "." + $outFileExt;
     	        overwrite: true;
     	        compressionType: $compressionType;
     	        tuplesPerFile: 10;
     	        // set block size to 64M - default is 128M
     	        blockSize: 67108864;      	        
		}
}

composite CompressionSampleRunner
{
	param
		expression<rstring> $hdfsUri: getSubmissionTimeValue("hdfsUri");
		expression<rstring> $hdfsUser : getSubmissionTimeValue("hdfsUser");
		expression<rstring> $hdfsRootPath: getSubmissionTimeValue("hdfsRootPath");

	graph

		() as GZIPSample = CompressionSample() { 
			param 
				dataFile: "compressionSampleData.txt";
				compressionType: "gzip";
				outFileExt: "gz";
				hdfsUri: $hdfsUri;
				hdfsUser:$hdfsUser;
     	    	hdfsRootPath: $hdfsRootPath;
     	    	
		}
		() as SnappySample = CompressionSample() { 
			param 
				dataFile: "compressionSampleData.txt";
				compressionType: "snappy"; 
				outFileExt: "snappy";
				hdfsUri: $hdfsUri;
				hdfsUser:$hdfsUser;
     	    	hdfsRootPath: $hdfsRootPath;
		}
}
