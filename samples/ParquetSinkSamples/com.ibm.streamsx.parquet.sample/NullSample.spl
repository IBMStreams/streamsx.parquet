namespace com.ibm.streamsx.parquet.sample;

use com.ibm.streamsx.parquet::ParquetSink;


/**
 * The sample demonstrates ParquetSink operator 
 * generating uncompressed parquet files. 
 * The operator closing output files for each 4 tuples.
 */
public composite NullValuesSample {

	param
		expression<rstring> $hdfsUri: getSubmissionTimeValue("hdfsUri", "hdfs://9.148.58.232:8020");
		expression<rstring> $hdfsUser : getSubmissionTimeValue("hdfsUser", "hdfs");
		expression<rstring> $rootPath: getSubmissionTimeValue("rootPath", "/user/hdfshome/parquet/partitioned");         
	         
	type
		SampleEvent_t =              
			timestamp vts,
			timestamp nts,
			rstring vstr,
			rstring nstr,
			float64 vf1,
			float64 nf1;            
	         
	graph
		

		stream<SampleEvent_t> SampleEvent = Beacon()  {
		    param iterations: 5;
		    output SampleEvent: 
		    	vts = getTimestamp(),
		    	nts = createTimestamp(0l,0u),
		    	vstr = "stringvalue-" + (rstring)IterationCount(),
		    	nstr = "",
		    	vf1 = (float64)IterationCount(),
		    	nf1 = nanl();
		    
		}
		

		() as NetworkEventParquetSink = ParquetSink(SampleEvent)
		{
			param
				hdfsUri: $hdfsUri;
				hdfsUser: $hdfsUser;
				rootPath: $rootPath;
				file:  "nullTest.txt";
				overwrite: true;
				compressionType: "uncompressed";
				tuplesPerFile: 4;
				blockSize: 1048576;
		}

}

